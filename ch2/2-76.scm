; 显式分派：命名冲突和显式调用会导致代码异常复杂和难以维护，不具备多态性。
; 数据导向：很容易通过打包来新增类型和操作。比较适合的策略
; 消息传递：每个实例都会闭包一个dispatch过程，是不是有点太吃内存了。新增类型方便，新增操作需要把已有的类型全部改一遍。