(define (square-tree lst)
    (let loop((lst lst))
        (if (null? lst)
            '()
            (if (pair? (car lst))
                (cons (square-tree (car lst)) (loop (cdr lst)))
                (cons (* (car lst) (car lst)) (loop (cdr lst)))
            )
        )
    )
)

(square-tree '(1 2 3 (4 5 (6 7) 8) 9 10 11))
;Value 13: (1 4 9 (16 25 (36 49) 64) 81 100 121)

;高阶方法
(define (square-tree-high lst)
    (map (lambda (x) 
            (if (pair? x)
                (square-tree-high x)
                (* x x))
        ) lst))
(square-tree-high '(1 2 3 (4 5 (6 7) 8) 9 10 11))
;Value 14: (1 4 9 (16 25 (36 49) 64) 81 100 121)