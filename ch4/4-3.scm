; 重写eval成为数据导向
; (define (eval exp env)
;     (cond ((self-evaluating? exp) exp)
;         ((variable? exp) (lookup-variable-value exp env))
;         ((quoted? exp) (text-of-quotation exp))
;         ((assignment? exp) (eval-assignment exp env))
;         ((definition? exp) (eval-definition exp env))
;         ((if? exp) (eval-if exp env))
;         ((lambda? exp) (make-procedure (lambda-parameters exp)
;                                        (lambda-body exp)
;                                        env))
;         ((begin? exp) (eval-sequence (begin-actions exp) env))
;         ((cond? exp) (eval (cond->if exp) env))
;         ((application? exp) (apply (eval (operator exp) env)
;                             (list-of-values (operands exp) env)))
;         (else (error "Unknown expression type -- EVAL" exp))))

;
(load "../ch2/put_get.scm")
;调用之前的put，get过程
(define (get-tag exp) (car exp))
(define (eval-proc exp env)
    (let ((proc (get 'eval (get-tag exp))))
        (if (null? proc)
            (if (pair? exp)
                ((get 'eval 'application ) exp env)
                (error "Unknown expression type -- EVAL" exp))
            (proc exp env))))


(define (eval exp env)
    (cond ((self-evaluating? exp) exp)
          ((variable? exp) (lookup-variable-value exp env))
          (else (eval-proc exp env))))

(define (install)
    ((put 'eval 'quote (lambda (exp env) (text-of-quotation exp)))
     (put 'eval 'set! eval-assignment)    
     (put 'eval 'define eval-definition)    
     (put 'eval 'if eval-if)
     (put 'eval 'lambda (lambda (exp env) 
                          (make-procedure (lambda-parameters exp)
                                          (lambda-body exp)
                                          env)))
     (put 'eval 'begin (lambda (exp env) (eval-sequence (begin-actions exp) env)))
     (put 'eval 'cond  (lambda (exp env) (eval (cond->if exp) env)))))

